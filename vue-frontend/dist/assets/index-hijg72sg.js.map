{"version":3,"file":"index-hijg72sg.js","sources":["../../src/utils/index.ts"],"sourcesContent":["import { type ClassValue, clsx } from 'clsx'\nimport { twMerge } from 'tailwind-merge'\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n// 格式化时间\nexport function formatTime(date: Date): string {\n  return date.toLocaleTimeString('zh-CN', {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  })\n}\n\n// 格式化文件大小\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes'\n  \n  const k = 1024\n  const sizes = ['Bytes', 'KB', 'MB', 'GB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n}\n\n// 清理文本用于语音合成\nexport function cleanTextForSpeech(text: string): string {\n  if (!text) return ''\n  \n  // 移除思考标签\n  let cleaned = text.replace(/<think>[\\s\\S]*?<\\/think>/g, '')\n  \n  // 移除Markdown格式\n  cleaned = cleaned.replace(/\\*\\*(.*?)\\*\\*/g, '$1') // 粗体\n  cleaned = cleaned.replace(/\\*(.*?)\\*/g, '$1') // 斜体\n  cleaned = cleaned.replace(/`(.*?)`/g, '$1') // 代码\n  cleaned = cleaned.replace(/#{1,6}\\s*(.*)/g, '$1') // 标题\n  cleaned = cleaned.replace(/\\[(.*?)\\]\\(.*?\\)/g, '$1') // 链接\n  \n  // 移除多余的空白字符\n  cleaned = cleaned.replace(/\\s+/g, ' ').trim()\n  \n  return cleaned\n}\n\n// 检查文本是否包含思考标签\nexport function hasThinkTags(text: string): boolean {\n  return /<think>[\\s\\S]*?<\\/think>/.test(text)\n}\n\n// 提取思考内容\nexport function extractThinkContent(text: string): { think: string; content: string } {\n  const thinkMatch = text.match(/<think>([\\s\\S]*?)<\\/think>/)\n  const think = thinkMatch ? thinkMatch[1].trim() : ''\n  const content = text.replace(/<think>[\\s\\S]*?<\\/think>/g, '').trim()\n  \n  return { think, content }\n}\n\n// 生成唯一ID\nexport function generateId(): string {\n  return Date.now().toString() + Math.random().toString(36).substr(2, 9)\n}\n\n// 防抖函数\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: number | null = null\n  \n  return (...args: Parameters<T>) => {\n    if (timeout) clearTimeout(timeout)\n    timeout = setTimeout(() => func(...args), wait)\n  }\n}\n\n// 节流函数\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args)\n      inThrottle = true\n      setTimeout(() => inThrottle = false, limit)\n    }\n  }\n} "],"names":["formatTime","date","formatFileSize","bytes","k","sizes","i","cleanTextForSpeech","text","cleaned","hasThinkTags","extractThinkContent","thinkMatch","think","content","generateId"],"mappings":"AAQO,SAASA,EAAWC,EAAoB,CACtC,OAAAA,EAAK,mBAAmB,QAAS,CACtC,KAAM,UACN,OAAQ,UACR,OAAQ,SAAA,CACT,CACH,CAGO,SAASC,EAAeC,EAAuB,CAChD,GAAAA,IAAU,EAAU,MAAA,UAExB,MAAMC,EAAI,KACJC,EAAQ,CAAC,QAAS,KAAM,KAAM,IAAI,EAClCC,EAAI,KAAK,MAAM,KAAK,IAAIH,CAAK,EAAI,KAAK,IAAIC,CAAC,CAAC,EAElD,OAAO,YAAYD,EAAQ,KAAK,IAAIC,EAAGE,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAI,IAAMD,EAAMC,CAAC,CACxE,CAGO,SAASC,EAAmBC,EAAsB,CACnD,GAAA,CAACA,EAAa,MAAA,GAGlB,IAAIC,EAAUD,EAAK,QAAQ,4BAA6B,EAAE,EAGhD,OAAAC,EAAAA,EAAQ,QAAQ,iBAAkB,IAAI,EACtCA,EAAAA,EAAQ,QAAQ,aAAc,IAAI,EAClCA,EAAAA,EAAQ,QAAQ,WAAY,IAAI,EAChCA,EAAAA,EAAQ,QAAQ,iBAAkB,IAAI,EACtCA,EAAAA,EAAQ,QAAQ,oBAAqB,IAAI,EAGnDA,EAAUA,EAAQ,QAAQ,OAAQ,GAAG,EAAE,KAAK,EAErCA,CACT,CAGO,SAASC,EAAaF,EAAuB,CAC3C,MAAA,2BAA2B,KAAKA,CAAI,CAC7C,CAGO,SAASG,EAAoBH,EAAkD,CAC9E,MAAAI,EAAaJ,EAAK,MAAM,4BAA4B,EACpDK,EAAQD,EAAaA,EAAW,CAAC,EAAE,OAAS,GAC5CE,EAAUN,EAAK,QAAQ,4BAA6B,EAAE,EAAE,KAAK,EAE5D,MAAA,CAAE,MAAAK,EAAO,QAAAC,CAAQ,CAC1B,CAGO,SAASC,GAAqB,CACnC,OAAO,KAAK,IAAA,EAAM,SAAA,EAAa,KAAK,SAAS,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CACvE"}